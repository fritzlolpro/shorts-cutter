name: Release

on:
  push:
    tags:
      - 'v*'  # –¢—Ä–∏–≥–≥–µ—Ä–∏—Ç—Å—è –Ω–∞ —Ç–µ–≥–∏ –≤–∏–¥–∞ v1.0.0, v1.2.3, etc.
  release:
    types: [created]
  workflow_dispatch:  # –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    inputs:
      tag_name:
        description: 'Tag name for release (e.g., v1.0.0)'
        required: true
        default: 'v0.1.0-test'
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
            suffix: linux-x64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip
            suffix: windows-x64
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: zip
            suffix: macos-x64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Linux
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose

      # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ (Windows)
      - name: Create Windows archive
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $binaryName = "shorts-cutter.exe"
          $archiveName = "shorts-cutter-${{ matrix.suffix }}.zip"
          
          # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤
          New-Item -ItemType Directory -Force -Path release_files
          
          # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
          Copy-Item "target\${{ matrix.target }}\release\$binaryName" release_files\
          Copy-Item "README.md" release_files\ -ErrorAction SilentlyContinue
          Copy-Item "README_RU.md" release_files\ -ErrorAction SilentlyContinue
          Copy-Item "LICENSE" release_files\ -ErrorAction SilentlyContinue
          
          # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
          Compress-Archive -Path release_files\* -DestinationPath $archiveName
          
          # –í—ã–≤–æ–¥–∏–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
          echo "archive_file=$archiveName" >> $env:GITHUB_OUTPUT

      # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ (Unix)
      - name: Create Unix archive
        if: matrix.os != 'windows-latest'
        shell: bash
      # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ (Unix)
      - name: Create Unix archive
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          BINARY_NAME="shorts-cutter"
          ARCHIVE_NAME="shorts-cutter-${{ matrix.suffix }}"
          
          # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤
          mkdir -p release_files
          
          # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
          cp target/${{ matrix.target }}/release/$BINARY_NAME release_files/
          cp README.md README_RU.md release_files/ 2>/dev/null || true
          cp LICENSE release_files/ 2>/dev/null || true
          
          # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            cd release_files && zip -r "../${ARCHIVE_NAME}.zip" . && cd ..
            echo "archive_file=${ARCHIVE_NAME}.zip" >> $GITHUB_OUTPUT
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" -C release_files .
            echo "archive_file=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_OUTPUT
          fi

      # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: shorts-cutter-${{ matrix.suffix }}
          path: ${{ steps.archive.outputs.archive_file || steps.create-windows-archive.outputs.archive_file }}

  # –°–æ–∑–¥–∞–µ–º —Ä–µ–ª–∏–∑ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Extract tag name
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          fi
        
      - name: Create or update release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Shorts Cutter ${{ env.TAG_NAME }}
          body: |
            ## Shorts Cutter ${{ env.TAG_NAME }}
            
            High-performance Rust CLI tool for batch converting horizontal MP4 videos into vertical shorts with blurred backgrounds.
            
            ### üéØ Features
            - Batch processing of MP4 files  
            - Parallel execution with configurable threads
            - Creates vertical shorts (720x1280) with blurred backgrounds
            - Comprehensive logging and error handling
            
            ### üì¶ Installation
            1. Download the appropriate archive for your platform below
            2. Extract the executable to your desired location
            3. Ensure **FFmpeg** is installed and available in PATH
            4. Run: `./shorts-cutter --help` (or `shorts-cutter.exe --help` on Windows)
            
            ### üñ•Ô∏è Platform Downloads
            - **Linux x64**: `shorts-cutter-linux-x64.tar.gz`
            - **Windows x64**: `shorts-cutter-windows-x64.zip`  
            - **macOS x64**: `shorts-cutter-macos-x64.zip`
            
            ### üöÄ Usage
            ```bash
            # Basic usage
            shorts-cutter --input ./videos --output ./shorts
            
            # With custom thread count
            shorts-cutter --input ./videos --output ./shorts --threads 4
            ```
            
            ### üìö Documentation
            - [English README](https://github.com/${{ github.repository }}/blob/master/README.md)
            - [Russian README](https://github.com/${{ github.repository }}/blob/master/README_RU.md)
          files: artifacts/**/*
          draft: false
          prerelease: false
