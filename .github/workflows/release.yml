name: Release

on:
  push:
    tags:
      - 'v*'  # Триггерится на теги вида v1.0.0, v1.2.3, etc.
  release:
    types: [created]
  workflow_dispatch:  # Для ручного тестирования
    inputs:
      tag_name:
        description: 'Tag name for release (e.g., v1.0.0)'
        required: true
        default: 'v0.1.0-test'
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
            suffix: linux-x64
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest  
            archive: zip
            suffix: windows-x64
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: zip
            suffix: macos-x64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Установим современную версию Rust
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Установим FFmpeg для тестирования (опционально)
      - name: Install FFmpeg (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install FFmpeg (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install ffmpeg

      # Обновим Cargo.lock до совместимой версии
      - name: Update Cargo.lock
        run: cargo update

      # Соберем бинарник
      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose

      # Создадим архив
      - name: Create archive
        id: archive
        shell: bash
        run: |
          # Определяем имя бинарника
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            BINARY_NAME="shorts-cutter.exe"
          else
            BINARY_NAME="shorts-cutter"
          fi
          
          # Копируем файлы для архива
          mkdir -p release_files
          cp target/${{ matrix.target }}/release/$BINARY_NAME release_files/
          cp README.md README_RU.md release_files/ 2>/dev/null || true
          cp LICENSE release_files/ 2>/dev/null || true
          
          # Создаем архив
          ARCHIVE_NAME="shorts-cutter-${{ matrix.suffix }}"
          
          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            cd release_files && zip -r "../${ARCHIVE_NAME}.zip" . && cd ..
            echo "archive_file=${ARCHIVE_NAME}.zip" >> $GITHUB_OUTPUT
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" -C release_files .
            echo "archive_file=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_OUTPUT
          fi

      # Загрузим артефакт
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: shorts-cutter-${{ matrix.suffix }}
          path: ${{ steps.archive.outputs.archive_file }}

  # Создаем релиз с артефактами
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Extract tag name
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          fi
        
      - name: Create or update release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          RUSTTARGET: ${{ matrix.target }}
          ARCHIVE_TYPES: ${{ matrix.archive }}
          EXTRA_FILES: "README.md LICENSE"
          tag_name: ${{ env.TAG_NAME }}
          name: Shorts Cutter ${{ env.TAG_NAME }}
          body: |
            ## Shorts Cutter ${{ env.TAG_NAME }}
            
            High-performance Rust CLI tool for batch converting horizontal MP4 videos into vertical shorts.
            
            ### Installation
            1. Download the appropriate archive for your platform
            2. Extract the executable
            3. Ensure FFmpeg is installed on your system
            4. Run: `./shorts-cutter --help`
            
            ### Platform Downloads
            - **Linux x64**: `shorts-cutter-linux-x64.zip`
            - **Windows x64**: `shorts-cutter-windows-x64.zip`  
            - **macOS x64**: `shorts-cutter-macos-x64.zip`
            
            ### Usage
            ```bash
            shorts-cutter --input ./videos --output ./shorts --threads 4
            ```
            
            For detailed usage instructions, see the [README](https://github.com/${{ github.repository }}/blob/master/README.md).
          draft: false
          prerelease: false
